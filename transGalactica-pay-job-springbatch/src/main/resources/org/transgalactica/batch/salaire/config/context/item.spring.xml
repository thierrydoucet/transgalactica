<?xml version="1.0" encoding="UTF-8"?>

<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/batch 
           http://www.springframework.org/schema/batch/spring-batch.xsd">
           
	<description>Trans'Galactica Batch - Items Definitions</description>

	<bean
		id="org.transgalactica.batch.salaire.item.EmployeEntityItemReader"
		class="org.springframework.batch.item.database.JpaPagingItemReader"
		p:entityManagerFactory-ref="entityManagerFactory"
		p:queryString="from org.transgalactica.management.data.people.bo.impl.AbstractJpaEmployeEntity order by id" />

	<bean
		id="org.transgalactica.batch.salaire.item.SalaireMapperItemProcessor"
		class="org.transgalactica.batch.salaire.item.impl.BasicSalaireMapperItemProcessor"
		scope="step"
		p:dateCalcul="#{jobParameters['salaire.compute.date']}" />

	<bean
		id="org.transgalactica.batch.salaire.item.SalaireToItemWriter"
		class="org.springframework.batch.item.file.FlatFileItemWriter"
		scope="step"
		p:encoding="UTF-8"
		p:resource="#{jobParameters['salaire.compute.output.filename']}">
		<property
			name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.FormatterLineAggregator"
				p:format="%s,%tF,%s,%.0f,%.0f,%.0f,%.0f">
				<property
					name="fieldExtractor">
					<bean
						class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor"
						p:names="nomEmploye, dateEmbaucheEmploye, typeEmploye, salaireBase, primeAnciennete, primeExperience, salaire" />
				</property>
			</bean>
		</property>
	</bean>

	<bean
		id="org.transgalactica.batch.salaire.item.SalaireToItemReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step"
		p:encoding="UTF-8"
		p:resource="#{jobParameters['salaire.compute.output.filename']}">
		<property
			name="lineMapper">
			<bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property
					name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
						p:names="nomEmploye, dateEmbaucheEmploye, typeEmploye, salaireBase, primeAnciennete, primeExperience, salaire" />
				</property>
				<property
					name="fieldSetMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"
						p:prototypeBeanName="org.transgalactica.batch.salaire.bo.SalaireTo">
						<property
							name="customEditors">
							<map>
								<entry
									key="java.util.Date">
									<bean
										class="org.springframework.beans.propertyeditors.CustomDateEditor">
										<constructor-arg>
											<bean
												class="java.text.SimpleDateFormat">
												<constructor-arg
													value="yyyy-MM-dd" />
											</bean>
										</constructor-arg>
										<constructor-arg
											value="false" />
									</bean>
								</entry>
							</map>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean
		id="org.transgalactica.batch.salaire.item.SalairePdfItemWriter"
		class="org.transgalactica.batch.salaire.item.impl.ITextFicheSalairePdfItemWriter"
		scope="step"
		p:outputDirectory="#{jobParameters['salaire.edit.output.directory']}" 
		p:dateCalcul="#{jobParameters['salaire.compute.date']}" />

</beans>
